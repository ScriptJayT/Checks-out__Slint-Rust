import { StyledStack, StyledStream } from "layouts/stacks.slint";

import { StyledButton } from "styled/button.slint";
import { LabeledInput } from "styled/labeled-input.slint";
import { Break } from "styled/break.slint";

import { Feedback } from "components/feedback.slint";
import { NavBar } from "components/navbar.slint";
import { TextEdit } from "std-widgets.slint";

export component AppWindow inherits Window {
    //? Feedback
    callback set_feedback(string);
    callback close_feedback();
    in property <string> feedback-out: "Feedback";
    in property <bool> is-open: false;

    //? Password
    callback save_password(string, string, string);

    default-font-family: "monospace";
    default-font-size: 12px; //buttons etc
    background: rgb(50, 50, 75, 0.95);

    StyledStream {
        stack-spacing: 20px;
        stack-padding: [20px, 20px, 20px, 20px];
        min-width: parent.width;
        min-height: parent.height;
        background: transparent;

        NavBar {
            username: "Jace";
         
            action-1 => {set_feedback("feed")}
            action-2 => {set_feedback("feed 2")}
            action-3 => {set_feedback("feed 3")}
        }

        Break {
            color: silver;
            thickness: 1px;
        }

        StyledStack {
            min-width: 500px;
            stack-spacing: 20px;
            background: rgb(0, 0, 0, 0.2);
            
            ref := LabeledInput {
                label: "Reference";
                label-width: 80px;
                input-placeholder: "...";
            }
            pw := LabeledInput {
                label: "Password";
                label-width: 80px;
                input-placeholder: "...";
            }
            descr := TextEdit {
                width: 240px;
                height: 100px;
            }
            StyledButton {
                button-text: "Save";

                button-click => { save-password(ref.value, pw.value, descr.text) }
            }
        }
    }
   
    Feedback {
        is-open: is-open;
        out-text: feedback-out;
        top: parent.height / 2;

        close => { close-feedback() }
    }
}

